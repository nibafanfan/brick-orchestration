import yaml
from jinja2 import Environment, FileSystemLoader
from pathlib import Path
from argparse import ArgumentParser

# ────── CONFIG ──────
MARK = "<!-- AUTO‑GENERATED‑README‑START -->"
BRICKS_DIR = Path(__file__).resolve().parents[1] / "brick_repos"
TEMPLATE_DIR = Path(__file__).resolve().parents[1] / "templates"
TEMPLATE_FN = "readme_template.j2"

# ────── HELPERS ──────
def load_meta(meta_path):
    with open(meta_path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

def render_readme(meta, env):
    tmpl = env.get_template(TEMPLATE_FN)
    first_src = meta["source"][0] if isinstance(meta.get("source"), list) else meta.get("source")
    context = {**meta, "src": first_src}
    return tmpl.render(**context)

def generate_for_brick(brick_name, env):
    brick_path = BRICKS_DIR / brick_name
    meta_path = brick_path / "meta.yaml"
    readme_path = brick_path / "README.md"

    if not meta_path.exists():
        print(f"⚠️  {brick_name}: meta.yaml not found – skipped")
        return

    try:
        meta = load_meta(meta_path)
    except yaml.YAMLError as e:
        print(f"❌  {brick_name}: invalid YAML – {e}")
        return

    autogenerated = MARK + "\n" + render_readme(meta, env)

    if readme_path.exists():
        old = readme_path.read_text(encoding="utf-8")
        manual = old.split(MARK, 1)[0].rstrip()
        combined = manual + "\n\n" + autogenerated
        readme_path.write_text(combined, encoding="utf-8")
        print(f"✅  {brick_name}: README.md updated")
    else:
        print(f"📝  {brick_name}: no README.md found — please add one manually")

def main():
    parser = ArgumentParser()
    parser.add_argument("--brick", help="Generate README for a specific brick only")
    args = parser.parse_args()

    env = Environment(
        loader=FileSystemLoader(TEMPLATE_DIR),
        autoescape=True,
        trim_blocks=True,
        lstrip_blocks=True
    )

    if args.brick:
        generate_for_brick(args.brick, env)
    else:
        for brick in sorted(BRICKS_DIR.iterdir()):
            if brick.is_dir():
                generate_for_brick(brick.name, env)

if __name__ == "__main__":
    main()
